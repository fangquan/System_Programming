Quan Fang (qfang)
quan_fang@brown.edu


(1)
Block structures depend it's free or allocated
For a free block, and first and second word after header are pointing to next free block and prev free block
--------------------------------------------------------------------------------------------------------
header(size|f)|NextFree|PrevFree|<--------------------Payload ------------------------->|footer(size|f)|
--------------------------------------------------------------------------------------------------------
For an alloc block, there are no "pointer words"
--------------------------------------------------------------------------------------------------------
header(size|a)|<-------------------------------Payload--------------------------------->|footer(size|a)|
--------------------------------------------------------------------------------------------------------


(2)
free list structure is a doubly linked list, next ptr and prev ptr are saved in each block, after current
block ptr. The value at NextFree word is the address of next free block; the value at PrevFree is the
address of prev free block.

      _________________________________________________________________
      |                                                               |
      V                                                               |
--------------------------------------------------------------------------------------------------------
size/0|N|P|<-Payload->|size/0|size/1|N|P|<-Payload->|size/1|size/0|N|P|<-Payload->|size/0|
--------------------------------------------------------------------------------------------------------
      ^|                                                          ^|
      ||__________________________________________________________||____________________>NULL
      |
    root

(3)
The allocator has 4 possible operations on free blocks.1,insert to the beginning of the free list;
2, delete it from the free list;3, alloc it, by fixing the alloc bit;4, split it; and  5,coalesce

(4)
Briefly speaking, the strategy of maintaining compaction follows three basic principles.
1, splitting after alloc, if enough bytes left; 2, merging for realloc if possible;
3, coalesce a new generated free block

(5)
The heap checker is able to print whole heap, free list, simple block and check consistency
btw header and footer



***********
Main Files:
***********

mm.{c,h}	
	Your solution malloc package. mm.c is the file that you
	will be handing in, and is the only file you should modify.

mdriver.c	
	The malloc driver that tests your mm.c file

short{1,2}-bal.rep
	Two tiny tracefiles to help you get started. 

Makefile	
	Builds the driver

**********************************
Other support files for the driver
**********************************

config.h	Configures the project driver
fsecs.{c,h}	Wrapper function for the different timer packages
clock.{c,h}	Routines for accessing the Pentium and Alpha cycle counters
fcyc.{c,h}	Timer functions based on cycle counters
ftimer.{c,h}	Object file; timer functions based on interval timers and gettimeofday()
memlib.{c,h}	Models the heap and sbrk function

*******************************
Building and running the driver
*******************************
To build the driver, type "make" to the shell.

To run the driver on a tiny test trace:
./mdriver -V -f short1-bal.rep

The -V option prints out helpful tracing and summary information.

To get a list of the driver flags:
./mdriver -h

